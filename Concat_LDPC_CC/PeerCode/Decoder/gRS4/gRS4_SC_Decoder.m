function [Estimated_U,Estimated_X,Estimated_L] = gRS4_SC_Decoder(Lambda,U,N,Is_Frozen_bit_Index_Vec,Is_Genie_Aided)

%     [Estimated_U,Estimated_X,Estimated_L] = gRS4_SC_Decoder_(Lambda,U,N,Is_Frozen_bit_Index_Vec,Is_Genie_Aided);
%     return;

%     [Estimated_U1,Estimated_X1,Estimated_L1] = gRS4_SC_Decoder_(Lambda,U,N,Is_Frozen_bit_Index_Vec,Is_Genie_Aided);
%     Estimated_U1 == U
%     [Estimated_U2,Estimated_X2,Estimated_L2] = gRS4_SC_Decoder__(Lambda,U,N,Is_Frozen_bit_Index_Vec,Is_Genie_Aided);
%     Estimated_U2 == U
%     [Estimated_U3,Estimated_X3,Estimated_L3] = gRS4_SC_Decoder___(Lambda,U,N,Is_Frozen_bit_Index_Vec,Is_Genie_Aided);
%     Estimated_U3 == U
    
    persistent gRS4_gf2

    gRS4_gf2 = [1     0     0     0     0     0     0     0;...
                0     1     0     0     0     0     0     0;...
                1     0     1     0     0     0     0     0;...
                0     1     0     1     0     0     0     0;...
                1     1     0     1     1     0     0     0;...
                1     0     1     1     0     1     0     0;...
                1     0     1     0     1     0     0     1;...
                0     1     0     1     0     1     1     1];
            
    if(N==8)
           
        Estimated_U = zeros(1,8);
        Estimated_L = zeros(4,4);
        Estimated_X = zeros(1,8);
        
        r = [1:1:4];
        t_gf2 = [0,0;0,1;1,0;1,1];
        
        for l=1:1:4
            
            w = Create_All_Options(2*(4-l),1);

            v = mod(w*gRS4_gf2(2*l+1:8,:),2);

            lambda_temp = v;

            if(~size(lambda_temp,1))
                lambda_temp = zeros(1,8);
            end
            
            t_temp = mod(t_gf2*gRS4_gf2(2*l-1:2*l,:),2);
            
            temp_Add = mod(bsxfun(@plus,Estimated_X,t_temp),2);
            
            x = mod(repmat(lambda_temp,4,1) + kron(temp_Add,ones(size(lambda_temp,1),1)),2);
            x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);

            minus_arg_sum = reshape(-sum(Lambda(1+bsxfun(@plus,x_gf4,4*(r-1))),2),size(lambda_temp,1),[]);
            
            if(size(minus_arg_sum,1)>1)
                max_arg_sum = max(minus_arg_sum);
                Estimated_L(:,l) = (max_arg_sum+log(sum(exp(bsxfun(@minus,minus_arg_sum,max_arg_sum)))));
            else
                Estimated_L(:,l) = minus_arg_sum;
            end
            
            if(Is_Frozen_bit_Index_Vec(l))
                Estimated_U(2*l-1:2*l) = U(2*l-1:2*l);
            else
                [~,Estimated_U_gf4] = max(Estimated_L(:,l));
                Estimated_U(1,2*l-1:2*l) = [(Estimated_U_gf4 - 1 - mod(Estimated_U_gf4 - 1,2))/2,mod(Estimated_U_gf4 - 1,2)];
            end
            
            if(Is_Genie_Aided)
                Estimated_X = mod(U(1:2*l)*gRS4_gf2(1:2*l,:),2);
            else
                Estimated_X = mod(Estimated_U(1:2*l)*gRS4_gf2(1:2*l,:),2);
            end
            
        end
        
        Estimated_L = bsxfun(@minus,Estimated_L(1,:),Estimated_L);
        
    else
        
        N_gf4 = N/2; %
        next_N = N/4; %
        next_N_gf4 = N_gf4/4; %
        
        Estimated_U = zeros(1,N);
        Estimated_L = zeros(4,N_gf4);
        Estimated_X = zeros(1,N);
        
        L = zeros(4,next_N_gf4); %
        
        r = [1:1:4];
        
        for l=1:1:4

            w = Create_All_Options(2*(4-l),1);

            v = mod(w*gRS4_gf2(2*l+1:end,:),2);

            lambda_temp = v;

            if(~size(lambda_temp,1))
                lambda_temp = zeros(1,8);
            end

            for t_gf4=0:1:3

                t = [(t_gf4-mod(t_gf4,2))/2,mod(t_gf4,2)];

                t_temp = mod(t*gRS4_gf2(2*l-1:2*l,:),2);

                for j=1:1:next_N_gf4 %
                
                    x = mod(bsxfun(@plus,lambda_temp,Estimated_X(1,8*(j-1)+1:8*j)+t_temp),2);
                    x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);

                    minus_arg_sum = reshape(-sum(Lambda(1+bsxfun(@plus,x_gf4,4*((j-1)*4+r-1))),2),size(lambda_temp,1),[]);

                    max_arg_sum = max(minus_arg_sum);
                    L(1+t_gf4,j) = (max_arg_sum+log(sum(exp(minus_arg_sum-max_arg_sum)))); %

                end %
                
            end

            L = bsxfun(@minus,L(1,:),L); %
            
            [Estimated_U(1,(l-1)*next_N+1:l*next_N),Estimated_X_temp,Estimated_L(:,(l-1)*next_N_gf4+1:l*next_N_gf4)] = gRS4_SC_Decoder(L,U(1,(l-1)*next_N+1:l*next_N),next_N,Is_Frozen_bit_Index_Vec(1,(l-1)*next_N_gf4+1:l*next_N_gf4),Is_Genie_Aided); %
            
            for j=1:1:next_N_gf4 %
            
                Estimated_X(1,8*(j-1)+1:8*j) = mod(Estimated_X(1,8*(j-1)+1:8*j) + Estimated_X_temp(2*j-1:2*j)*gRS4_gf2(2*l-1:2*l,:),2); %
            
            end %
            
        end
                    
    end 
    
end


function [Estimated_U,Estimated_X,Estimated_L] = gRS4_SC_Decoder_(Lambda,U,N,Is_Frozen_bit_Index_Vec,Is_Genie_Aided)

    persistent gRS4_gf2

    gRS4_gf2 = [1     0     0     0     0     0     0     0;...
                0     1     0     0     0     0     0     0;...
                1     0     1     0     0     0     0     0;...
                0     1     0     1     0     0     0     0;...
                1     1     0     1     1     0     0     0;...
                1     0     1     1     0     1     0     0;...
                1     0     1     0     1     0     0     1;...
                0     1     0     1     0     1     1     1];
            
    if(N==8)
           
        Estimated_U = zeros(1,8);
        Estimated_L = zeros(4,4);
        Estimated_X = zeros(1,8);
        
        for l=1:1:4
            
            w = Create_All_Options(2*(4-l),1);

            v = mod(w*gRS4_gf2(2*l+1:end,:),2);

            lambda_temp = v;

            if(~size(lambda_temp,1))
                lambda_temp = zeros(1,8);
            end
            
            for t_gf4=0:1:3
                
                t = [(t_gf4-mod(t_gf4,2))/2,mod(t_gf4,2)];
                
                t_temp = mod(t*gRS4_gf2(2*l-1:2*l,:),2);

                minus_arg_sum = zeros(1,size(lambda_temp,1));
                
                for i=1:1:size(lambda_temp,1)
                    
                    x = mod(lambda_temp(i,:) + Estimated_X + t_temp,2);
                    x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);

                    for r=1:1:4
                        minus_arg_sum(i) = minus_arg_sum(i) - Lambda(1+x_gf4(r),r);
                    end
                                        
                end
                
                max_arg_sum = max(minus_arg_sum);
                Estimated_L(1+t_gf4,l) = (max_arg_sum+log(sum(exp(minus_arg_sum-max_arg_sum))));
                
            end
            
            if(Is_Frozen_bit_Index_Vec(l))
                Estimated_U(2*l-1:2*l) = U(2*l-1:2*l);
            else
                [~,Estimated_U_gf4] = max(Estimated_L(:,l));
                Estimated_U(1,2*l-1:2*l) = [(Estimated_U_gf4 - 1 - mod(Estimated_U_gf4 - 1,2))/2,mod(Estimated_U_gf4 - 1,2)];
            end
            
            if(Is_Genie_Aided)
                Estimated_X = mod(U(1:2*l)*gRS4_gf2(1:2*l,:),2);
            else
                Estimated_X = mod(Estimated_U(1:2*l)*gRS4_gf2(1:2*l,:),2);
            end
            
        end
        
        Estimated_L = bsxfun(@minus,Estimated_L(1,:),Estimated_L);
        
    else
        
        N_gf4 = N/2; %
        next_N = N/4; %
        next_N_gf4 = N_gf4/4; %
        
        Estimated_U = zeros(1,N);
        Estimated_L = zeros(4,N_gf4);
        Estimated_X = zeros(1,N);
        
        L = zeros(4,next_N_gf4); %
        
        for l=1:1:4

            w = Create_All_Options(2*(4-l),1);

            v = mod(w*gRS4_gf2(2*l+1:end,:),2);

            lambda_temp = v;

            if(~size(lambda_temp,1))
                lambda_temp = zeros(1,8);
            end

            for t_gf4=0:1:3

                t = [(t_gf4-mod(t_gf4,2))/2,mod(t_gf4,2)];

                t_temp = mod(t*gRS4_gf2(2*l-1:2*l,:),2);

                for j=1:1:N/8 %
                
                    minus_arg_sum = zeros(1,size(lambda_temp,1));

                    for i=1:1:size(lambda_temp,1)

                        x = mod(lambda_temp(i,:) + Estimated_X(1,8*(j-1)+1:8*j) + t_temp,2); %
                        x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);

                        for r=1:1:4
                            minus_arg_sum(i) = minus_arg_sum(i) - Lambda(1+x_gf4(r),(j-1)*4+r); %
                        end

                    end

                    max_arg_sum = max(minus_arg_sum);
                    L(1+t_gf4,j) = (max_arg_sum+log(sum(exp(minus_arg_sum-max_arg_sum)))); %

                end %
                
            end

            L = bsxfun(@minus,L(1,:),L); %
            
            [Estimated_U(1,(l-1)*next_N+1:l*next_N),Estimated_X_temp,Estimated_L(:,(l-1)*next_N_gf4+1:l*next_N_gf4)] = gRS4_SC_Decoder_(L,U(1,(l-1)*next_N+1:l*next_N),next_N,Is_Frozen_bit_Index_Vec(1,(l-1)*next_N_gf4+1:l*next_N_gf4),Is_Genie_Aided); %
            
            for j=1:1:next_N_gf4 %
            
                Estimated_X(1,8*(j-1)+1:8*j) = mod(Estimated_X(1,8*(j-1)+1:8*j) + Estimated_X_temp(2*j-1:2*j)*gRS4_gf2(2*l-1:2*l,:),2); %
            
            end %
            
        end
                    
    end 
    
end


function [Estimated_U,Estimated_X,Estimated_L] = gRS4_SC_Decoder__(Lambda,U,N,Is_Frozen_bit_Index_Vec,Is_Genie_Aided)
    
    persistent gRS4_gf2
    
    gRS4_gf2 = [1     0     0     0     0     0     0     0;...
                0     1     0     0     0     0     0     0;...
                1     0     1     0     0     0     0     0;...
                0     1     0     1     0     0     0     0;...
                1     1     0     1     1     0     0     0;...
                1     0     1     1     0     1     0     0;...
                1     0     1     0     1     0     0     1;...
                0     1     0     1     0     1     1     1];
            
    if(N==8)
           
        Estimated_U = zeros(1,8);
        Estimated_L = zeros(4,4);
        Estimated_X = zeros(1,8);
        
        r = [1:1:4];
        t_gf2 = [0,0;0,1;1,0;1,1];
        
        for l=1:1:4
            
            w = Create_All_Options(2*(4-l),1);

            v = mod(w*gRS4_gf2(2*l+1:8,:),2);

            lambda_temp = v;

            if(~size(lambda_temp,1))
                lambda_temp = zeros(1,8);
            end
            
            t_temp = mod(t_gf2*gRS4_gf2(2*l-1:2*l,:),2);
            
            temp_Add = mod(bsxfun(@plus,Estimated_X,t_temp),2);
            
            x = mod(repmat(lambda_temp,4,1) + kron(temp_Add,ones(size(lambda_temp,1),1)),2);
            x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);

            minus_arg_sum = reshape(-sum(Lambda(1+bsxfun(@plus,x_gf4,4*(r-1))),2),size(lambda_temp,1),[]);
            
            if(size(minus_arg_sum,1)>1)
                max_arg_sum = max(minus_arg_sum);
                Estimated_L(:,l) = (max_arg_sum+log(sum(exp(bsxfun(@minus,minus_arg_sum,max_arg_sum)))));
            else
                Estimated_L(:,l) = minus_arg_sum;
            end
            
            if(Is_Frozen_bit_Index_Vec(l))
                Estimated_U(2*l-1:2*l) = U(2*l-1:2*l);
            else
                [~,Estimated_U_gf4] = max(Estimated_L(:,l));
                Estimated_U(1,2*l-1:2*l) = [(Estimated_U_gf4 - 1 - mod(Estimated_U_gf4 - 1,2))/2,mod(Estimated_U_gf4 - 1,2)];
            end
            
            if(Is_Genie_Aided)
                Estimated_X = mod(U(1:2*l)*gRS4_gf2(1:2*l,:),2);
            else
                Estimated_X = mod(Estimated_U(1:2*l)*gRS4_gf2(1:2*l,:),2);
            end
            
        end
        
        Estimated_L = bsxfun(@minus,Estimated_L(1,:),Estimated_L);
        
    else
        
        N_gf4 = N/2;
        next_N = N/4;
        next_N_gf4 = N_gf4/4;
        
        Estimated_U = zeros(1,N);
        Estimated_L = zeros(4,N_gf4);
        Estimated_X = zeros(1,N);
        
        L = zeros(4,next_N_gf4);
        
        r = [1:1:4];
        t_gf2 = [0,0;0,1;1,0;1,1];
        j = [1:1:next_N_gf4];
        
        for l=1:1:4

            w = Create_All_Options(2*(4-l),1);

            v = mod(w*gRS4_gf2(2*l+1:end,:),2);

            lambda_temp = v;

            if(~size(lambda_temp,1))
                lambda_temp = zeros(1,8);
            end
            
            
            t_temp = mod(t_gf2*gRS4_gf2(2*l-1:2*l,:),2);
            
            temp_Add = mod(repmat(reshape(Estimated_X,8,[]).',4,1) + kron(t_temp,ones(next_N_gf4,1)),2);
            
            x = mod(repmat(lambda_temp,N_gf4,1) + kron(temp_Add,ones(size(lambda_temp,1),1)),2);
            x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);

            minus_arg_sum = reshape(-sum(reshape(Lambda(1+x_gf4 + kron(repmat(bsxfun(@plus,16*j.',4*r-20),4,1),ones(size(lambda_temp,1),1))),[],size(lambda_temp,1))),4,[]);
            
%             minus_arg_sum = -sum(Lambda(1+bsxfun(@plus,x_gf4,4*((j-1)*4+r-1))),2);
%             
%             minus_arg_sum = reshape(-sum(Lambda(1+bsxfun(@plus,x_gf4,4*(r-1))),2),size(lambda_temp,1),[]);
            
            
            for t_gf4=0:1:3

                t = [(t_gf4-mod(t_gf4,2))/2,mod(t_gf4,2)];

                t_temp = mod(t*gRS4_gf2(2*l-1:2*l,:),2);

                for j=1:1:N/8 %
                
                    minus_arg_sum = zeros(1,size(lambda_temp,1));

                    for i=1:1:size(lambda_temp,1)

                        x = mod(lambda_temp(i,:) + Estimated_X(1,8*(j-1)+1:8*j) + t_temp,2); %
                        x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);

                        for r=1:1:4
                            minus_arg_sum(i) = minus_arg_sum(i) - Lambda(1+x_gf4(r),(j-1)*4+r); %
                        end

                    end

                    max_arg_sum = max(minus_arg_sum);
                    L(1+t_gf4,j) = (max_arg_sum+log(sum(exp(minus_arg_sum-max_arg_sum)))); %

                end %
                
            end

            L = bsxfun(@minus,L(1,:),L); %
            
            [Estimated_U(1,(l-1)*next_N+1:l*next_N),Estimated_X_temp,Estimated_L(:,(l-1)*next_N_gf4+1:l*next_N_gf4)] = gRS4_SC_Decoder__(L,U(1,(l-1)*next_N+1:l*next_N),next_N,Is_Frozen_bit_Index_Vec(1,(l-1)*next_N_gf4+1:l*next_N_gf4),Is_Genie_Aided); %
            
            for j=1:1:next_N_gf4 %
            
                Estimated_X(1,8*(j-1)+1:8*j) = mod(Estimated_X(1,8*(j-1)+1:8*j) + Estimated_X_temp(2*j-1:2*j)*gRS4_gf2(2*l-1:2*l,:),2); %
            
            end %
            
        end
        
        for l=1:1:4

            r = [1:1:4];
            t_gf2 = [0,0;0,1;1,0;1,1];
            j = [1:1:next_N_gf4];
            
            w = Create_All_Options(2*(4-l),1);

            v = mod(w*gRS4_gf2(2*l+1:end,:),2);

            lambda_temp = v;

            if(~size(lambda_temp,1))
                lambda_temp = zeros(1,8);
            end      

            t_temp = mod(t_gf2*gRS4_gf2(2*l-1:2*l,:),2);

%             temp_Add = mod(repmat(lambda_temp,4,1) + kron(t_temp,ones(size(lambda_temp,1),1)),2);
% 
%             x = mod(repmat(temp_Add,4,1) + kron(reshape(Estimated_X,8,[]).',ones(size(temp_Add,1),1)),2);
            temp_Add = mod(repmat(lambda_temp,next_N_gf4,1) + kron(reshape(Estimated_X,8,[]).',ones(size(lambda_temp,1),1)),2);

            x = mod(repmat(temp_Add,4,1) + kron(t_temp,ones(size(temp_Add,1),1)),2);
            x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);

            minus_arg_sum = reshape(-sum(Lambda(1+repmat(x_gf4,next_N_gf4,1)+kron(bsxfun(@plus,16*j.',4*r-20),ones(size(x_gf4,1),1))),2),size(lambda_temp,1),[]);

            if(size(minus_arg_sum,1)>1)
                max_arg_sum = max(minus_arg_sum);
                L = (max_arg_sum+log(sum(exp(bsxfun(@minus,minus_arg_sum,max_arg_sum)))));
            else
                L = minus_arg_sum;
            end

            L = reshape(L,[],4).';
            
            L = bsxfun(@minus,L(1,:),L);
            
            [Estimated_U(1,(l-1)*next_N+1:l*next_N),Estimated_X_temp,Estimated_L(:,(l-1)*next_N_gf4+1:l*next_N_gf4)] = gRS4_SC_Decoder__(L,U(1,(l-1)*next_N+1:l*next_N),next_N,Is_Frozen_bit_Index_Vec(1,(l-1)*next_N_gf4+1:l*next_N_gf4),Is_Genie_Aided);
            
            Estimated_X = reshape((mod(reshape(Estimated_X,8,[]).' + (reshape(Estimated_X_temp,2,[]).'*gRS4_gf2(2*l-1:2*l,:)),2)).',1,[]);
            
        end
         
    end 
    
end


function [Estimated_U,Estimated_X,Estimated_L] = gRS4_SC_Decoder___(Lambda,U,N,Is_Frozen_bit_Index_Vec,Is_Genie_Aided)
    
    persistent gRS4_gf2
    persistent lambda_arg_0
    persistent rep_lambda_temp_1
    persistent rep_lambda_temp_2
    persistent t_temp_1
    persistent t_temp_2
    persistent t_temp_3
    
    gRS4_gf2 = [1     0     0     0     0     0     0     0;...
                0     1     0     0     0     0     0     0;...
                1     0     1     0     0     0     0     0;...
                0     1     0     1     0     0     0     0;...
                1     1     0     1     1     0     0     0;...
                1     0     1     1     0     1     0     0;...
                1     0     1     0     1     0     0     1;...
                0     1     0     1     0     1     1     1];

    lambda_arg_0 = [1     5     9    13;...
                     2     6    10    16;...
                     3     7    11    14;...
                     4     8    12    15;...
                     3     8    10    13;...
                     4     7     9    16;...
                     1     6    12    14;...
                     2     5    11    15;...
                     4     6    11    13;...
                     3     5    12    16;...
                     2     8     9    14;...
                     1     7    10    15;...
                     2     7    12    13;...
                     1     8    11    16;...
                     4     5    10    14;...
                     3     6     9    15;...
                     2     6     9    13;...
                     1     5    10    16;...
                     4     8    11    14;...
                     3     7    12    15;...
                     4     7    10    13;...
                     3     8     9    16;...
                     2     5    12    14;...
                     1     6    11    15;...
                     3     5    11    13;...
                     4     6    12    16;...
                     1     7     9    14;...
                     2     8    10    15;...
                     1     8    12    13;...
                     2     7    11    16;...
                     3     6    10    14;...
                     4     5     9    15;...
                     3     7     9    13;...
                     4     8    10    16;...
                     1     5    11    14;...
                     2     6    12    15;...
                     1     6    10    13;...
                     2     5     9    16;...
                     3     8    12    14;...
                     4     7    11    15;...
                     2     8    11    13;...
                     1     7    12    16;...
                     4     6     9    14;...
                     3     5    10    15;...
                     4     5    12    13;...
                     3     6    11    16;...
                     2     7    10    14;...
                     1     8     9    15;...
                     4     8     9    13;...
                     3     7    10    16;...
                     2     6    11    14;...
                     1     5    12    15;...
                     2     5    10    13;...
                     1     6     9    16;...
                     4     7    12    14;...
                     3     8    11    15;...
                     1     7    11    13;...
                     2     8    12    16;...
                     3     5     9    14;...
                     4     6    10    15;...
                     3     6    12    13;...
                     4     5    11    16;...
                     1     8    10    14;...
                     2     7     9    15;...
                     2     5     9    13;...
                     1     6    10    16;...
                     4     7    11    14;...
                     3     8    12    15;...
                     4     8    10    13;...
                     3     7     9    16;...
                     2     6    12    14;...
                     1     5    11    15;...
                     3     6    11    13;...
                     4     5    12    16;...
                     1     8     9    14;...
                     2     7    10    15;...
                     1     7    12    13;...
                     2     8    11    16;...
                     3     5    10    14;...
                     4     6     9    15;...
                     1     6     9    13;...
                     2     5    10    16;...
                     3     8    11    14;...
                     4     7    12    15;...
                     3     7    10    13;...
                     4     8     9    16;...
                     1     5    12    14;...
                     2     6    11    15;...
                     4     5    11    13;...
                     3     6    12    16;...
                     2     7     9    14;...
                     1     8    10    15;...
                     2     8    12    13;...
                     1     7    11    16;...
                     4     6    10    14;...
                     3     5     9    15;...
                     4     7     9    13;...
                     3     8    10    16;...
                     2     5    11    14;...
                     1     6    12    15;...
                     2     6    10    13;...
                     1     5     9    16;...
                     4     8    12    14;...
                     3     7    11    15;...
                     1     8    11    13;...
                     2     7    12    16;...
                     3     6     9    14;...
                     4     5    10    15;...
                     3     5    12    13;...
                     4     6    11    16;...
                     1     7    10    14;...
                     2     8     9    15;...
                     3     8     9    13;...
                     4     7    10    16;...
                     1     6    11    14;...
                     2     5    12    15;...
                     1     5    10    13;...
                     2     6     9    16;...
                     3     7    12    14;...
                     4     8    11    15;...
                     2     7    11    13;...
                     1     8    12    16;...
                     4     5     9    14;...
                     3     6    10    15;...
                     4     6    12    13;...
                     3     5    11    16;...
                     2     8    10    14;...
                     1     7     9    15;...
                     3     5     9    13;...
                     4     6    10    16;...
                     1     7    11    14;...
                     2     8    12    15;...
                     1     8    10    13;...
                     2     7     9    16;...
                     3     6    12    14;...
                     4     5    11    15;...
                     2     6    11    13;...
                     1     5    12    16;...
                     4     8     9    14;...
                     3     7    10    15;...
                     4     7    12    13;...
                     3     8    11    16;...
                     2     5    10    14;...
                     1     6     9    15;...
                     4     6     9    13;...
                     3     5    10    16;...
                     2     8    11    14;...
                     1     7    12    15;...
                     2     7    10    13;...
                     1     8     9    16;...
                     4     5    12    14;...
                     3     6    11    15;...
                     1     5    11    13;...
                     2     6    12    16;...
                     3     7     9    14;...
                     4     8    10    15;...
                     3     8    12    13;...
                     4     7    11    16;...
                     1     6    10    14;...
                     2     5     9    15;...
                     1     7     9    13;...
                     2     8    10    16;...
                     3     5    11    14;...
                     4     6    12    15;...
                     3     6    10    13;...
                     4     5     9    16;...
                     1     8    12    14;...
                     2     7    11    15;...
                     4     8    11    13;...
                     3     7    12    16;...
                     2     6     9    14;...
                     1     5    10    15;...
                     2     5    12    13;...
                     1     6    11    16;...
                     4     7    10    14;...
                     3     8     9    15;...
                     2     8     9    13;...
                     1     7    10    16;...
                     4     6    11    14;...
                     3     5    12    15;...
                     4     5    10    13;...
                     3     6     9    16;...
                     2     7    12    14;...
                     1     8    11    15;...
                     3     7    11    13;...
                     4     8    12    16;...
                     1     5     9    14;...
                     2     6    10    15;...
                     1     6    12    13;...
                     2     5    11    16;...
                     3     8    10    14;...
                     4     7     9    15;...
                     4     5     9    13;...
                     3     6    10    16;...
                     2     7    11    14;...
                     1     8    12    15;...
                     2     8    10    13;...
                     1     7     9    16;...
                     4     6    12    14;...
                     3     5    11    15;...
                     1     6    11    13;...
                     2     5    12    16;...
                     3     8     9    14;...
                     4     7    10    15;...
                     3     7    12    13;...
                     4     8    11    16;...
                     1     5    10    14;...
                     2     6     9    15;...
                     3     6     9    13;...
                     4     5    10    16;...
                     1     8    11    14;...
                     2     7    12    15;...
                     1     7    10    13;...
                     2     8     9    16;...
                     3     5    12    14;...
                     4     6    11    15;...
                     2     5    11    13;...
                     1     6    12    16;...
                     4     7     9    14;...
                     3     8    10    15;...
                     4     8    12    13;...
                     3     7    11    16;...
                     2     6    10    14;...
                     1     5     9    15;...
                     2     7     9    13;...
                     1     8    10    16;...
                     4     5    11    14;...
                     3     6    12    15;...
                     4     6    10    13;...
                     3     5     9    16;...
                     2     8    12    14;...
                     1     7    11    15;...
                     3     8    11    13;...
                     4     7    12    16;...
                     1     6     9    14;...
                     2     5    10    15;...
                     1     5    12    13;...
                     2     6    11    16;...
                     3     7    10    14;...
                     4     8     9    15;...
                     1     8     9    13;...
                     2     7    10    16;...
                     3     6    11    14;...
                     4     5    12    15;...
                     3     5    10    13;...
                     4     6     9    16;...
                     1     7    12    14;...
                     2     8    11    15;...
                     4     7    11    13;...
                     3     8    12    16;...
                     2     5     9    14;...
                     1     6    10    15;...
                     2     6    12    13;...
                     1     5    11    16;...
                     4     8    10    14;...
                     3     7     9    15];
       
     rep_lambda_temp_1 = [0     0     0     0     0     0     0     0;...
                             0     1     0     1     0     1     1     1;...
                             1     0     1     0     1     0     0     1;...
                             1     1     1     1     1     1     1     0;...
                             1     0     1     1     0     1     0     0;...
                             1     1     1     0     0     0     1     1;...
                             0     0     0     1     1     1     0     1;...
                             0     1     0     0     1     0     1     0;...
                             1     1     0     1     1     0     0     0;...
                             1     0     0     0     1     1     1     1;...
                             0     1     1     1     0     0     0     1;...
                             0     0     1     0     0     1     1     0;...
                             0     1     1     0     1     1     0     0;...
                             0     0     1     1     1     0     1     1;...
                             1     1     0     0     0     1     0     1;...
                             1     0     0     1     0     0     1     0;...
                             0     0     0     0     0     0     0     0;...
                             0     1     0     1     0     1     1     1;...
                             1     0     1     0     1     0     0     1;...
                             1     1     1     1     1     1     1     0;...
                             1     0     1     1     0     1     0     0;...
                             1     1     1     0     0     0     1     1;...
                             0     0     0     1     1     1     0     1;...
                             0     1     0     0     1     0     1     0;...
                             1     1     0     1     1     0     0     0;...
                             1     0     0     0     1     1     1     1;...
                             0     1     1     1     0     0     0     1;...
                             0     0     1     0     0     1     1     0;...
                             0     1     1     0     1     1     0     0;...
                             0     0     1     1     1     0     1     1;...
                             1     1     0     0     0     1     0     1;...
                             1     0     0     1     0     0     1     0;...
                             0     0     0     0     0     0     0     0;...
                             0     1     0     1     0     1     1     1;...
                             1     0     1     0     1     0     0     1;...
                             1     1     1     1     1     1     1     0;...
                             1     0     1     1     0     1     0     0;...
                             1     1     1     0     0     0     1     1;...
                             0     0     0     1     1     1     0     1;...
                             0     1     0     0     1     0     1     0;...
                             1     1     0     1     1     0     0     0;...
                             1     0     0     0     1     1     1     1;...
                             0     1     1     1     0     0     0     1;...
                             0     0     1     0     0     1     1     0;...
                             0     1     1     0     1     1     0     0;...
                             0     0     1     1     1     0     1     1;...
                             1     1     0     0     0     1     0     1;...
                             1     0     0     1     0     0     1     0;...
                             0     0     0     0     0     0     0     0;...
                             0     1     0     1     0     1     1     1;...
                             1     0     1     0     1     0     0     1;...
                             1     1     1     1     1     1     1     0;...
                             1     0     1     1     0     1     0     0;...
                             1     1     1     0     0     0     1     1;...
                             0     0     0     1     1     1     0     1;...
                             0     1     0     0     1     0     1     0;...
                             1     1     0     1     1     0     0     0;...
                             1     0     0     0     1     1     1     1;...
                             0     1     1     1     0     0     0     1;...
                             0     0     1     0     0     1     1     0;...
                             0     1     1     0     1     1     0     0;...
                             0     0     1     1     1     0     1     1;...
                             1     1     0     0     0     1     0     1;...
                             1     0     0     1     0     0     1     0];
                 
     
     rep_lambda_temp_2 = [0     0     0     0     0     0     0     0;...
                                 0     1     0     1     0     1     1     1;...
                                 1     0     1     0     1     0     0     1;...
                                 1     1     1     1     1     1     1     0;...
                                 0     0     0     0     0     0     0     0;...
                                 0     1     0     1     0     1     1     1;...
                                 1     0     1     0     1     0     0     1;...
                                 1     1     1     1     1     1     1     0;...
                                 0     0     0     0     0     0     0     0;...
                                 0     1     0     1     0     1     1     1;...
                                 1     0     1     0     1     0     0     1;...
                                 1     1     1     1     1     1     1     0;...
                                 0     0     0     0     0     0     0     0;...
                                 0     1     0     1     0     1     1     1;...
                                 1     0     1     0     1     0     0     1;...
                                 1     1     1     1     1     1     1     0];
                             
    t_temp_1 = [0     0     0     0     0     0     0     0;...
                 0     1     0     1     0     0     0     0;...
                 1     0     1     0     0     0     0     0;...
                 1     1     1     1     0     0     0     0];
                 
    t_temp_2 = [0     0     0     0     0     0     0     0;...
                 1     0     1     1     0     1     0     0;...
                 1     1     0     1     1     0     0     0;...
                 0     1     1     0     1     1     0     0];
        
    t_temp_3 = [0     0     0     0     0     0     0     0;...
                 0     1     0     1     0     1     1     1;...
                 1     0     1     0     1     0     0     1;...
                 1     1     1     1     1     1     1     0];
                    
    if(N==8)
           
        Estimated_U = zeros(1,8);
        Estimated_L = zeros(4,4);
        
        r = [0:1:3];
        
        %first symbol
        
        minus_arg_sum = reshape(-sum(Lambda(lambda_arg_0),2),64,[]);
        
        max_arg_sum = max(minus_arg_sum);

        Estimated_L(:,1) = (max_arg_sum+log(sum(exp(bsxfun(@minus,minus_arg_sum,max_arg_sum)))));

        if(Is_Frozen_bit_Index_Vec(1))
            Estimated_U(1:2) = U(1:2);
        else
            [~,Estimated_U_gf4] = max(Estimated_L(:,1));
            Estimated_U_gf4 = Estimated_U_gf4 - 1;
            Estimated_U_gf4_mod2 = mod(Estimated_U_gf4,2);
            Estimated_U(1:2) = [(Estimated_U_gf4 - Estimated_U_gf4_mod2)/2,Estimated_U_gf4_mod2];
        end

        if(Is_Genie_Aided)
            Estimated_X = mod(U(1:2)*gRS4_gf2(1:2,:),2);
        else
            Estimated_X = mod(Estimated_U(1:2)*gRS4_gf2(1:2,:),2);
        end
                
        %second symbol
        
        temp_Add = mod(bsxfun(@plus,Estimated_X,t_temp_1),2);
        
        x = mod(rep_lambda_temp_1 + kron(temp_Add,ones(16,1)),2);
        x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);
        
        minus_arg_sum = reshape(-sum(Lambda(1+bsxfun(@plus,x_gf4,4*r)),2),16,[]);
        
        max_arg_sum = max(minus_arg_sum);

        Estimated_L(:,2) = (max_arg_sum+log(sum(exp(bsxfun(@minus,minus_arg_sum,max_arg_sum)))));

        if(Is_Frozen_bit_Index_Vec(3))
            Estimated_U(3:4) = U(3:4);
        else
            [~,Estimated_U_gf4] = max(Estimated_L(:,2));
            Estimated_U_gf4 = Estimated_U_gf4 - 1;
            Estimated_U_gf4_mod2 = mod(Estimated_U_gf4,2);
            Estimated_U(3:4) = [(Estimated_U_gf4 - Estimated_U_gf4_mod2)/2,Estimated_U_gf4_mod2];
        end

        if(Is_Genie_Aided)
            Estimated_X = mod(U(1:4)*gRS4_gf2(1:4,:),2);
        else
            Estimated_X = mod(Estimated_U(1:4)*gRS4_gf2(1:4,:),2);
        end
                
        %third symbol
        
        temp_Add = mod(bsxfun(@plus,Estimated_X,t_temp_2),2);
        
        x = mod(rep_lambda_temp_2 + kron(temp_Add,ones(4,1)),2);
        x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);
        
        minus_arg_sum = reshape(-sum(Lambda(1+bsxfun(@plus,x_gf4,4*r)),2),4,[]);
        
        max_arg_sum = max(minus_arg_sum);

        Estimated_L(:,3) = (max_arg_sum+log(sum(exp(bsxfun(@minus,minus_arg_sum,max_arg_sum)))));

        if(Is_Frozen_bit_Index_Vec(5))
            Estimated_U(5:6) = U(5:6);
        else
            [~,Estimated_U_gf4] = max(Estimated_L(:,3));
            Estimated_U_gf4 = Estimated_U_gf4 - 1;
            Estimated_U_gf4_mod2 = mod(Estimated_U_gf4,2);
            Estimated_U(5:6) = [(Estimated_U_gf4 - Estimated_U_gf4_mod2)/2,Estimated_U_gf4_mod2];
        end

        if(Is_Genie_Aided)
            Estimated_X = mod(U(1:6)*gRS4_gf2(1:6,:),2);
        else
            Estimated_X = mod(Estimated_U(1:6)*gRS4_gf2(1:6,:),2);
        end
                
        %forth symbol
        
        x = mod(bsxfun(@plus,Estimated_X,t_temp_3),2);
        x_gf4 = 2*x(:,1:2:end)+x(:,2:2:end);
        
        minus_arg_sum = -sum(Lambda(1+bsxfun(@plus,x_gf4,4*r)),2);
        
        Estimated_L(:,4) = minus_arg_sum;

        if(Is_Frozen_bit_Index_Vec(7))
            Estimated_U(7:8) = U(7:8);
        else
            [~,Estimated_U_gf4] = max(Estimated_L(:,4));
            Estimated_U_gf4 = Estimated_U_gf4 - 1;
            Estimated_U_gf4_mod2 = mod(Estimated_U_gf4,2);
            Estimated_U(7:8) = [(Estimated_U_gf4 - Estimated_U_gf4_mod2)/2,Estimated_U_gf4_mod2];
        end

        if(Is_Genie_Aided)
            Estimated_X = mod(U(1:8)*gRS4_gf2(1:8,:),2);
        else
            Estimated_X = mod(Estimated_U(1:8)*gRS4_gf2(1:8,:),2);
        end
        
        Estimated_L = bsxfun(@minus,Estimated_L(1,:),Estimated_L);
        
    else
        
       
         
    end 
    
%     U
%     Estimated_U
    
end

